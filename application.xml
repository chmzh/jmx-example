<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.0.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	>

	 <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean" lazy-init="true" />
	
	<!-- indicate to first look for a server -->  
        <!-- <property name="locateExistingServerIfPossible" value="true"/> -->  
        <!-- search for the MBeanServer instance with the given agentId -->  
       <!--  <property name="agentId" value="MBeanServer_instance_agentId"/>  --> 
	
	<!-- this bean needs to be eagerly pre-instantiated in order for the exporting 
		to occur; this means that it must not be marked as lazily initialized -->
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
		<property name="beans">
			<map>
				<entry key="bean:name=TestBean" value-ref="testBean" />
			</map>
		</property>
		 <property name="server" ref="mbeanServer" />
	</bean>
	<bean id="testBean" class="com.jmx.JmxTestBean">
		<property name="name" value="TEST" />
		<property name="age" value="100" />
	</bean>
	
	<!-- 远程连接 RMI方式-->  
    <!--  
        地址输入  
        service:jmx:rmi://localhost/jndi/rmi://192.168.1.100:8080/myconnector  
    -->  
    <bean class="org.springframework.jmx.support.ConnectorServerFactoryBean"  
        depends-on="rmiRegistry" lazy-init="false">  
        <property name="objectName" value="connector:name=rmi" />  
          
        <!-- 远程连接的地址 -->  
        <property name="serviceUrl"  
            value="service:jmx:rmi://localhost/jndi/rmi://localhost:8080/myconnector" />  
    </bean>  
      
    <!-- 使用JNDI-RMI的方式进行远程连接通讯,并且配置占用端口号 -->  
    <bean id="rmiRegistry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">  
        <property name="port" value="8080" />  
    </bean>
</beans>
